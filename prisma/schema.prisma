// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  id_token          String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  name          String?

  age                 Int?
  height              Float?
  weight              Float?
  physical_activity   String?
  gender              String?
  dislike_ingredients String?

  meals UserMeal[]

  // Relations
  accounts Account[]
  sessions Session[]
  grocery_list GroceryList[]
}

model Meal {
  meal_id Int      @id @default(autoincrement())
  portion Float?
  date    DateTime
  type    String?

  users   UserMeal[]
  recipes MealRecipe[]
}

model UserMeal {
  id      String
  meal_id Int

  user User @relation(fields: [id], references: [id], onDelete: Cascade)
  meal Meal @relation(fields: [meal_id], references: [meal_id], onDelete: Cascade)

  @@id([id, meal_id])
}

model GroceryList {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  items     GroceryItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model GroceryItem {
  id             Int        @id @default(autoincrement())
  groceryList    GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)
  groceryListId  Int
  ingredient     Ingredient  @relation(fields: [ingredient_id], references: [ingredient_id])
  ingredient_id  Int
}

model Recipe {
  recipe_id     Int     @id @default(autoincrement())
  procedure     String? @db.Text
  cooking_time  Int?
  serving_count Int?
  name          String?
  fridge        Int?
  freezer       Int?
  image         String?

  meals          MealRecipe[]
  ingredients    RecipeIngredient[]
  types          RecipeType[]
  nutrition_info RecipeInfo?
}

model MealRecipe {
  meal_id   Int
  recipe_id Int

  meal   Meal   @relation(fields: [meal_id], references: [meal_id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

  @@id([meal_id, recipe_id])
}

enum MealType {
  Desayuno
  Almuerzo
  Merienda
  Cena
}

model Ingredient {
  ingredient_id   Int     @id @default(autoincrement())
  name            String  @unique
  freezer         Int
  fridge          Int
  recommendations String?
  image           String?
  category        IngredientCategory?
  barcode         String? @unique

  nutrition_info NutritionInfo? @relation("IngredientNutrition", fields: [nutrition_id], references: [nutrition_id])
  nutrition_id   Int?           @unique

  recipes RecipeIngredient[]

  GroceryItem GroceryItem[]
}

enum IngredientCategory {
  Frutas
  Verduras
  Carnes
  Legumbres
  Pescados
  Cereales
  Granos
  LÃ¡cteos
  Huevos
}

model RecipeIngredient {
  recipe_id     Int
  ingredient_id Int

  recipe     Recipe     @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade)

  @@id([recipe_id, ingredient_id])
}

model NutritionInfo {
  nutrition_id Int    @id @default(autoincrement())
  protein      Float?
  carbs        Float?
  fats         Float?
  calories     Float?
  fiber        Float?
  quantity     Float?

  recipe     RecipeInfo?   @relation("RecipeNutrition")
  ingredient Ingredient?   @relation("IngredientNutrition")
}

model RecipeInfo {
  recipe_id    Int @unique
  nutrition_id Int @unique

  recipe Recipe        @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  info   NutritionInfo @relation("RecipeNutrition", fields: [nutrition_id], references: [nutrition_id], onDelete: Cascade)

  @@id([recipe_id])
}

model RecipeType {
  recipe_id Int
  type      MealType

  recipe Recipe @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

  @@id([recipe_id, type])
}
